gradebook.py:
The return None is placed inside the for loop. This means if the first student in self.gradebook is not the one you are searching for, it immediately returns None, leading to the NoneType error when you try to format the result for Bob.

SalesData.py:
( ) -> tuple
[ ] -> liste
{ } -> dictionnaire

tuple -> les valeurs à l'intérieur ne sont pas modifiables
liste -> on peut ajouter, modifier, supprimer les valeurs à l'intérieur
dictionnaire -> forme clé, valeur, à chaque clé est associée une valeur

SalesData.py:
Function to Remove Duplicates from a List of Tuples (Preserving Order)
This function uses dict.fromkeys() to remove duplicates from a list of tuples while maintaining the order of the first occurrence. The list is first sorted by a specified key (e.g., the first element in the tuple), and then the dictionary keys are used to eliminate duplicates.

%%
total_sales.sort(key=lambda x: x[0])  # Sort by the first element in the tuple
new_list = list(dict.fromkeys(total_sales))  # Remove duplicates and preserve order
%%
Key operation: dict.fromkeys() removes duplicates while keeping the first occurrence intact, and list() converts the dictionary back into a list.
Use case: Ideal when you need a concise way to remove duplicates from a list of tuples without using an explicit loop.

SalesTransactions.py:
You can iterate over a string, list, tuple, or even dictionary. But it is not possible to iterate over an integer or set of numbers.
When you're appending to a list in a dictionary, you need to ensure the key exists first. If the key is missing, you'll encounter a KeyError.
